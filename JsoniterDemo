package jsoniterTest1;


import com.jsoniter.JsonIterator;
import com.jsoniter.any.Any;
import com.jsoniter.output.EncodingMode;
import com.jsoniter.output.JsonStream;
import com.jsoniter.spi.DecodingMode;


public class Main {

    static {
        new DemoCodegenConfig().setup();
    }

    public static void main(String[] args) {

        User user = JsonIterator.deserialize("{\"firstName\": \"tao\", \"lastName\": \"wen\", \"score\": \"1024\"}", User.class);
        System.out.println(user.firstName);
        System.out.println(user.lastName);
        System.out.println(user.score);
        user.attachment = Any.wrapArray(new int[] {1,2,3});
        System.out.println(JsonStream.serialize(user));

    }
}


------------------------

package jsoniterTest1;


import com.jsoniter.JsonIterator;
import com.jsoniter.any.Any;
import com.jsoniter.output.EncodingMode;
import com.jsoniter.output.JsonStream;
import com.jsoniter.spi.Decoder;
import com.jsoniter.spi.DecodingMode;
import com.jsoniter.spi.JsoniterSpi;
import com.jsoniter.spi.TypeLiteral;
import com.jsoniter.static_codegen.StaticCodegenConfig;

import java.io.IOException;
import java.util.List;
import java.util.Map;

public class DemoCodegenConfig implements StaticCodegenConfig {

    @Override
    public void setup() {
        // register custom decoder or extensions before codegen
        // so that we doing codegen, we know in which case, we need to callback
        Any.registerEncoders();
        JsonIterator.setMode(DecodingMode.STATIC_MODE);
        JsonStream.setMode(EncodingMode.STATIC_MODE);
        JsonStream.setIndentionStep(2);
        JsoniterSpi.registerPropertyDecoder(User.class, "score", new Decoder.IntDecoder() {
            @Override
            public int decodeInt(JsonIterator iter) throws IOException {
                return Integer.valueOf(iter.readString());
            }
        });
    }

    @Override
    public TypeLiteral[] whatToCodegen() {
        return new TypeLiteral[]{
                // generic types, need to use this syntax
                new TypeLiteral<List<Integer>>() {
                },
                new TypeLiteral<List<User>>() {
                },
                new TypeLiteral<Map<String, Object>>() {
                },
                // array
                TypeLiteral.create(int[].class),
                // object
                TypeLiteral.create(User.class)
        };
    }
}


----------------------------


package jsoniterTest1;

import com.jsoniter.annotation.JsonProperty;
import com.jsoniter.any.Any;

public class User {
    @JsonProperty(nullable = false)
    public String firstName;
    @JsonProperty(nullable = false)
    public String lastName;
    public int score;
    public Any attachment;
}










---------------------------------


// Mustercode f√ºr build.gradle
plugins {
    id 'java'
    // add
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

// add
mainClassName = 'com.jsoniter.demo.Demo'

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//JSONITER
dependencies {
// https://mvnrepository.com/artifact/com.jsoniter/jsoniter
    implementation group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
}

// add
javafx {
    version = "11"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}


---------------------------






package jsoniter_codegen.cfg1173796797.decoder.com.jsoniter.demo;

public class User implements com.jsoniter.spi.Decoder {
    public static java.lang.Object decode_(com.jsoniter.JsonIterator iter) throws java.io.IOException { java.lang.Object existingObj = com.jsoniter.CodegenAccess.resetExistingObject(iter);
        byte nextToken = com.jsoniter.CodegenAccess.readByte(iter);
        if (nextToken != '{') {
            if (nextToken == 'n') {
                com.jsoniter.CodegenAccess.skipFixedBytes(iter, 3);
                return null;
            } else {
                nextToken = com.jsoniter.CodegenAccess.nextToken(iter);
                if (nextToken == 'n') {
                    com.jsoniter.CodegenAccess.skipFixedBytes(iter, 3);
                    return null;
                }
            } // end of if null
        } // end of if {
        nextToken = com.jsoniter.CodegenAccess.readByte(iter);
        if (nextToken != '"') {
            if (nextToken == '}') {
                return (existingObj == null ? new com.jsoniter.demo.User() : (com.jsoniter.demo.User)existingObj);
            } else {
                nextToken = com.jsoniter.CodegenAccess.nextToken(iter);
                if (nextToken == '}') {
                    return (existingObj == null ? new com.jsoniter.demo.User() : (com.jsoniter.demo.User)existingObj);
                } else {
                    com.jsoniter.CodegenAccess.unreadByte(iter);
                }
            } // end of if end
        } else { com.jsoniter.CodegenAccess.unreadByte(iter); }// end of if not quote
        java.lang.String _firstName_ = null;
        java.lang.String _lastName_ = null;
        int _score_ = 0;
        com.jsoniter.any.Any _attachment_ = null;
        do {
            switch (com.jsoniter.CodegenAccess.readObjectFieldAsHash(iter)) {
                case -1513391000:
                    _attachment_ = (com.jsoniter.any.Any)iter.readAny();
                    continue;
                case -1078100014:
                    _lastName_ = (java.lang.String)iter.readString();
                    continue;
                case -799547430:
                    _firstName_ = (java.lang.String)iter.readString();
                    continue;
                case -768634731:
                    _score_ = (int)com.jsoniter.CodegenAccess.readInt("score@jsoniter_codegen.cfg1173796797.decoder.com.jsoniter.demo.User", iter);
                    continue;
            }
            iter.skip();
        } while (com.jsoniter.CodegenAccess.nextTokenIsComma(iter));
        com.jsoniter.demo.User obj = (existingObj == null ? new com.jsoniter.demo.User() : (com.jsoniter.demo.User)existingObj);
        obj.firstName = _firstName_;
        obj.lastName = _lastName_;
        obj.score = _score_;
        obj.attachment = _attachment_;
        return obj;
    }public java.lang.Object decode(com.jsoniter.JsonIterator iter) throws java.io.IOException {
        return decode_(iter);
    }
}

--------------------------------


package jsoniter_codegen.cfg1173796797.encoder.com.jsoniter.demo;

public class User implements com.jsoniter.spi.Encoder {
    public void encode(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
        if (obj == null) { stream.writeNull(); return; }
        encode_((com.jsoniter.demo.User)obj, stream);
    }
    public static void encode_(com.jsoniter.demo.User obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
        stream.writeObjectStart();
        stream.writeIndention();
        stream.writeObjectField("firstName");
        stream.writeVal((java.lang.String)obj.firstName);
        stream.writeMore();
        stream.writeObjectField("lastName");
        stream.writeVal((java.lang.String)obj.lastName);
        stream.writeMore();
        stream.writeObjectField("score");
        stream.writeVal((int)obj.score);
        stream.writeMore();
        stream.writeObjectField("attachment");
        if (obj.attachment == null) { stream.writeNull(); } else {
            stream.writeVal((com.jsoniter.any.Any)obj.attachment);
        }
        stream.writeObjectEnd();
    }
}


-----------------------------------

package jsoniter_codegen.cfg1173796797.encoder;

public class int_array implements com.jsoniter.spi.Encoder {
    public void encode(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
        if (obj == null) { stream.writeNull(); return; }
        encode_((int[])obj, stream);
    }
    public static void encode_(java.lang.Object obj, com.jsoniter.output.JsonStream stream) throws java.io.IOException {
        int[] arr = (int[])obj;
        if (arr.length == 0) { stream.write((byte)'[', (byte)']'); return; }
        stream.writeArrayStart(); stream.writeIndention();
        int i = 0;
        int e = arr[i++];
        stream.writeVal((int)e);
        while (i < arr.length) {
            stream.writeMore();
            e = arr[i++];
            stream.writeVal((int)e);
        }
        stream.writeArrayEnd();
    }
}


-----------------------------------------




